// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).


// The ExtendAlu chip is an extension of the standard ALU which also supports
// shift operations.
// The inputs of the extended ALU are instruction[9], x[16], y[16].
// The "ng" and "zr" output pins behave the same as in the regular ALU.
// The "out" output is defined as follows:
// If instruction[8]=1 and instruction[7]=1 the output is identical to the 
// regular ALU, where:
// instruction[5]=zx, instruction[4]=nx, ..., instruction[0]=no
// Else, if instruction[8]=0 and instruction[7]=1, the output is a shift:
// - If instruction[4] == 0, the input "y" will be shifted, otherwise "x".
// - If instruction[5] == 0, the shift will be a right-shift, otherwise left.
// - All other inputs are undefined.

CHIP ExtendAlu {
     IN x[16], y[16], instruction[9];
     OUT out[16], zr, ng;
     
     PARTS:
     // Put your code here:
     And(a=instruction[7], b=instruction[8], out=andOut);

     ALU(x=x, y=y, zx=instruction[5], nx=instruction[4],
      zy=instruction[3], ny=instruction[2], f=instruction[1],
       no=instruction[0], out=aluOut, zr=zrTempReg, ng=ngTemp);

     ShiftRight(in=x, out=xShiftedRight);
     ShiftRight(in=y, out=yShiftedRight);
     ShiftLeft(in=x, out=xShiftedLeft);
     ShiftLeft(in=y, out=yShiftedLeft);
     // Or(a=instruction[4], b=instruction[5], out=orOut);
     Mux4Way16(a=yShiftedRight, b=yShiftedLeft, c=xShiftedRight, d=xShiftedLeft, sel[0]=instruction[5], 
     sel[1] = instruction[4], out=muxOut);

     Mux16(a=muxOut, b=aluOut, sel=andOut, out=out, out[15]=ng, out[0..14]=out1, out[0..7]=out2, out[8..15]=out3);

    Or8Way(in=out2, out=out2or);  //for zr
    Or8Way(in=out3, out=out3or);
    Or(a=out2or, b=out3or, out=dzr);

    Not(in=dzr,out=zrTempShift);

    Mux(a=zrTempShift, b=zrTempReg, sel=instruction[8], out=zr);
     }
