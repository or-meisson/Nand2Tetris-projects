// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

// This chip is an extension of the regular CPU that uses the extended ALU.
// If instruction[15]==0 or (instruction[14]==1 and instruction[13]==1),
// then CpuMul behaves exactly the same as the regular CPU.
// If instruction[15]==1 and instruction[14]==0 the chip will behave as follows:
// | Instruction           | 15 | 14 | 13 | a | c1 | c2 | c3 | c4 | c5 | c6 |
// |-----------------------|:--:|:--:|:--:|:-:|:--:|:--:|:--:|:--:|:--:|:--:|
// | Regular a-instruction |  0 |  * |  * | * |  * |  * |  * |  * |  * |  * |
// | Regular c-instruction |  1 |  1 |  1 | * |  * |  * |  * |  * |  * |  * |
// | dest=A<<;jump         |  1 |  0 |  1 | 0 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=D<<;jump         |  1 |  0 |  1 | 0 |  1 |  1 |  0 |  0 |  0 |  0 |
// | dest=M<<;jump         |  1 |  0 |  1 | 1 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=A>>;jump         |  1 |  0 |  1 | 0 |  0 |  0 |  0 |  0 |  0 |  0 |
// | dest=D>>;jump         |  1 |  0 |  1 | 0 |  0 |  1 |  0 |  0 |  0 |  0 |
// | dest=M>>;jump         |  1 |  0 |  1 | 1 |  0 |  0 |  0 |  0 |  0 |  0 |
// Where:
// - "<<" is a left shift, and ">>" is a right shift, as defined in project 2.
//   These notations were chosen because they are used in real programming
//   languages.
// - dest and jump can take the same values as in the regular CPU.

CHIP CpuMul {
    IN  
        inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).
    OUT 
        outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction
    
    PARTS:
    //for reg cpu
    And(a=instruction[14], b=instruction[13], out=outAnd);
    Not(in=instruction[15], out=notInsFifteen);
    Or(a=notInsFifteen, b=outAnd, out=isReg  );


////////////////////////////////////////////////////////////////

    //for special cpu
    Mux16(a=instruction, b=aluout, sel=instruction[15], out=firstmuxoutput);
    Not(in= instruction[5], out=not1);
    Nand(a=not1, b=instruction[15], out=isA);
    And(a=instruction[4], b=instruction[15], out=isD);
    ARegister(in=firstmuxoutput, load=isA,out=aregisteroutput, out[0..14]=addressM); //a register
    DRegister(in=aluout, load=isD, out=dregisteroutput); //d register

    Mux16(a=aregisteroutput, b=inM, sel=instruction[12], out=secondmuxoutput);
    ExtendAlu(x=dregisteroutput, y=secondmuxoutput,
     instruction[0..5]= instruction[6..11],instruction[6]=false, instruction[7]=true, 
     instruction[8]=isReg, out=outM, out=aluout,  zr=zr, ng=ng);
    Not(in=zr, out=notzero);
    Not(in=ng, out=notnegative);
    And(a=notzero, b=notnegative, out=positive);
    And(a=positive, b=instruction[0], out=out1);
    And(a=zr, b=instruction[1], out=out2);
    And(a=ng, b=instruction[2], out=out3);
    Or(a=out1, b=out2, out=orout);
    Or(a=orout, b=out3, out=temp);
    And(a=instruction[15], b=temp, out=forpc);
    PC(in=aregisteroutput, reset=reset, inc=true, load=forpc, out[0..14]=pc);

    And(a=instruction[15], b=instruction[3], out=writeM);
    

}
