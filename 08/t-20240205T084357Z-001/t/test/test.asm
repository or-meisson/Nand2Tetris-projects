@256
D=A
@SP
M=D
//writing call Sys.init
@Array.null$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(Array.null$ret.1)
//writing function Array.new
(Array.new)
//push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M
@SEC_NEGATIVE0.Array.new
D;JLT
@SEC_POSITIVE0.Array.new
D;JGT
@BOTH_SAME0.Array.new
0;JMP
(SEC_NEGATIVE0.Array.new)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME0.Array.new
D;JLE
@DIFFERENT0.Array.new
D;JGT
(SEC_POSITIVE0.Array.new)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME0.Array.new
D;JGE
@DIFFERENT0.Array.new
D;JLT
(DIFFERENT0.Array.new)
@SP
A=M-1
D=M
@TRUE0.Array.new
D;JLT
@FALSE0.Array.new
0;JMP
(BOTH_SAME0.Array.new)
@SP
A=M-1
D=M
A=A-1
D=D-M
@TRUE0.Array.new
D;JLT
(FALSE0.Array.new)
@SP
A=M-1
A=A-1
M=0
@END0.Array.new
0;JMP
(TRUE0.Array.new)
@SP
A=M-1
A=A-1
M=-1
(END0.Array.new)
@SP
M=M-1
//not
@SP
A=M-1
M=!M
//write goto IF_TRUE0 if top of stack is not false
@SP
A=M-1
D=M
@SP
M=M-1
@Array.new$IF_TRUE0
D;JNE
//write goto IF_FALSE0
@Array.new$IF_FALSE0
0;JMP
//write label IF_TRUE0
(Array.new$IF_TRUE0)
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//writing call Sys.error
@Array.Array.new$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Array.Array.new$ret.2)
//pop temp 0
@5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//write label IF_FALSE0
(Array.new$IF_FALSE0)
//push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//writing call Memory.alloc
@Array.Array.new$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.alloc
0;JMP
(Array.Array.new$ret.3)
//writing return
@LCL
D=M
@frame
M=D
@5
D=A
@frame
D=M-D
A=D
D=M
@return_address
M=D
//pop argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M-1
A=D
D=M
@THAT
M=D
@2
D=A
@frame
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@frame
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@frame
D=M-D
A=D
D=M
@LCL
M=D
@return_address
A=M
0;JMP
//writing function Array.dispose
(Array.dispose)
//push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop pointer 0
@THIS
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push pointer 0
@THIS
D=A
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//writing call Memory.deAlloc
@Array.Array.dispose$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.deAlloc
0;JMP
(Array.Array.dispose$ret.4)
//pop temp 0
@5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//writing return
@LCL
D=M
@frame
M=D
@5
D=A
@frame
D=M-D
A=D
D=M
@return_address
M=D
//pop argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M-1
A=D
D=M
@THAT
M=D
@2
D=A
@frame
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@frame
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@frame
D=M-D
A=D
D=M
@LCL
M=D
@return_address
A=M
0;JMP
//writing function Main.main
(Main.main)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 1
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 2
@LCL
D=M
@2
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 3
@LCL
D=M
@3
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 5
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 4
@LCL
D=M
@4
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 5
@LCL
D=M
@5
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//push local 2
@LCL
D=M
@2
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//push local 3
@LCL
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//push local 4
@LCL
D=M
@4
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//push local 5
@LCL
D=M
@5
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop local 6
@LCL
D=M
@6
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//writing call Math.multiply
@Main.Main.main$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Main.Main.main$ret.1)
//push local 2
@LCL
D=M
@2
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 3
@LCL
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//writing call Math.multiply
@Main.Main.main$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Main.Main.main$ret.2)
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//push local 4
@LCL
D=M
@4
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 5
@LCL
D=M
@5
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//writing call Math.multiply
@Main.Main.main$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Main.Main.main$ret.3)
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop local 7
@LCL
D=M
@7
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push local 5
@LCL
D=M
@5
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//writing call Math.divide
@Main.Main.main$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Main.Main.main$ret.4)
//push local 4
@LCL
D=M
@4
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//writing call Math.divide
@Main.Main.main$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Main.Main.main$ret.5)
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//writing call Math.divide
@Main.Main.main$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Main.Main.main$ret.6)
//pop local 8
@LCL
D=M
@8
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 5000
@5000
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 6
@LCL
D=M
@6
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//writing call Memory.poke
@Main.Main.main$ret.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.poke
0;JMP
(Main.Main.main$ret.7)
//pop temp 0
@5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 5001
@5001
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 7
@LCL
D=M
@7
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//writing call Memory.poke
@Main.Main.main$ret.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.poke
0;JMP
(Main.Main.main$ret.8)
//pop temp 0
@5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 5002
@5002
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 8
@LCL
D=M
@8
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//writing call Memory.poke
@Main.Main.main$ret.9
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.poke
0;JMP
(Main.Main.main$ret.9)
//pop temp 0
@5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//writing return
@LCL
D=M
@frame
M=D
@5
D=A
@frame
D=M-D
A=D
D=M
@return_address
M=D
//pop argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M-1
A=D
D=M
@THAT
M=D
@2
D=A
@frame
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@frame
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@frame
D=M-D
A=D
D=M
@LCL
M=D
@return_address
A=M
0;JMP
//writing function Math.init
(Math.init)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 16
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
//writing call Array.new
@Math.Math.init$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Math.Math.init$ret.1)
//pop static 1
@SP
M=M-1
A=M
D=M
@Math.1
M=D
//push constant 16
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
//writing call Array.new
@Math.Math.init$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Math.Math.init$ret.2)
//pop static 0
@SP
M=M-1
A=M
D=M
@Math.0
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push temp 0
@5
D=A
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//write label WHILE_EXP0
(Math.init$WHILE_EXP0)
//push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 15
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M
@SEC_NEGATIVE1.Math.init
D;JLT
@SEC_POSITIVE1.Math.init
D;JGT
@BOTH_SAME1.Math.init
0;JMP
(SEC_NEGATIVE1.Math.init)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME1.Math.init
D;JLE
@DIFFERENT1.Math.init
D;JGT
(SEC_POSITIVE1.Math.init)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME1.Math.init
D;JGE
@DIFFERENT1.Math.init
D;JLT
(DIFFERENT1.Math.init)
@SP
A=M-1
D=M
@TRUE1.Math.init
D;JGT
@FALSE1.Math.init
0;JMP
(BOTH_SAME1.Math.init)
@SP
A=M-1
D=M
A=A-1
D=D-M
@TRUE1.Math.init
D;JGT
(FALSE1.Math.init)
@SP
A=M-1
A=A-1
M=0
@END1.Math.init
0;JMP
(TRUE1.Math.init)
@SP
A=M-1
A=A-1
M=-1
(END1.Math.init)
@SP
M=M-1
//not
@SP
A=M-1
M=!M
//write goto WHILE_END0 if top of stack is not false
@SP
A=M-1
D=M
@SP
M=M-1
@Math.init$WHILE_END0
D;JNE
//push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
A=M-1
D=M
A=A-1
M=M-D
@SP
M=M-1
//push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
A=M-1
D=M
A=A-1
M=M-D
@SP
M=M-1
//push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop temp 0
@5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push temp 0
@5
D=A
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//write goto WHILE_EXP0
@Math.init$WHILE_EXP0
0;JMP
//write label WHILE_END0
(Math.init$WHILE_END0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//writing return
@LCL
D=M
@frame
M=D
@5
D=A
@frame
D=M-D
A=D
D=M
@return_address
M=D
//pop argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M-1
A=D
D=M
@THAT
M=D
@2
D=A
@frame
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@frame
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@frame
D=M-D
A=D
D=M
@LCL
M=D
@return_address
A=M
0;JMP
//writing function Math.abs
(Math.abs)
//push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M
@SEC_NEGATIVE10.Math.abs
D;JLT
@SEC_POSITIVE10.Math.abs
D;JGT
@BOTH_SAME10.Math.abs
0;JMP
(SEC_NEGATIVE10.Math.abs)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME10.Math.abs
D;JLE
@DIFFERENT10.Math.abs
D;JGT
(SEC_POSITIVE10.Math.abs)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME10.Math.abs
D;JGE
@DIFFERENT10.Math.abs
D;JLT
(DIFFERENT10.Math.abs)
@SP
A=M-1
D=M
@TRUE10.Math.abs
D;JGT
@FALSE10.Math.abs
0;JMP
(BOTH_SAME10.Math.abs)
@SP
A=M-1
D=M
A=A-1
D=D-M
@TRUE10.Math.abs
D;JGT
(FALSE10.Math.abs)
@SP
A=M-1
A=A-1
M=0
@END10.Math.abs
0;JMP
(TRUE10.Math.abs)
@SP
A=M-1
A=A-1
M=-1
(END10.Math.abs)
@SP
M=M-1
//write goto IF_TRUE0 if top of stack is not false
@SP
A=M-1
D=M
@SP
M=M-1
@Math.abs$IF_TRUE0
D;JNE
//write goto IF_FALSE0
@Math.abs$IF_FALSE0
0;JMP
//write label IF_TRUE0
(Math.abs$IF_TRUE0)
//push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//neg
@SP
A=M-1
M=-M
//pop argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//write label IF_FALSE0
(Math.abs$IF_FALSE0)
//push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//writing return
@LCL
D=M
@frame
M=D
@5
D=A
@frame
D=M-D
A=D
D=M
@return_address
M=D
//pop argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M-1
A=D
D=M
@THAT
M=D
@2
D=A
@frame
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@frame
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@frame
D=M-D
A=D
D=M
@LCL
M=D
@return_address
A=M
0;JMP
//writing function Math.multiply
(Math.multiply)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M
@SEC_NEGATIVE12.Math.multiply
D;JLT
@SEC_POSITIVE12.Math.multiply
D;JGT
@BOTH_SAME12.Math.multiply
0;JMP
(SEC_NEGATIVE12.Math.multiply)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME12.Math.multiply
D;JLE
@DIFFERENT12.Math.multiply
D;JGT
(SEC_POSITIVE12.Math.multiply)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME12.Math.multiply
D;JGE
@DIFFERENT12.Math.multiply
D;JLT
(DIFFERENT12.Math.multiply)
@SP
A=M-1
D=M
@TRUE12.Math.multiply
D;JGT
@FALSE12.Math.multiply
0;JMP
(BOTH_SAME12.Math.multiply)
@SP
A=M-1
D=M
A=A-1
D=D-M
@TRUE12.Math.multiply
D;JGT
(FALSE12.Math.multiply)
@SP
A=M-1
A=A-1
M=0
@END12.Math.multiply
0;JMP
(TRUE12.Math.multiply)
@SP
A=M-1
A=A-1
M=-1
(END12.Math.multiply)
@SP
M=M-1
//push argument 1
@ARG
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M
@SEC_NEGATIVE13.Math.multiply
D;JLT
@SEC_POSITIVE13.Math.multiply
D;JGT
@BOTH_SAME13.Math.multiply
0;JMP
(SEC_NEGATIVE13.Math.multiply)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME13.Math.multiply
D;JLE
@DIFFERENT13.Math.multiply
D;JGT
(SEC_POSITIVE13.Math.multiply)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME13.Math.multiply
D;JGE
@DIFFERENT13.Math.multiply
D;JLT
(DIFFERENT13.Math.multiply)
@SP
A=M-1
D=M
@TRUE13.Math.multiply
D;JLT
@FALSE13.Math.multiply
0;JMP
(BOTH_SAME13.Math.multiply)
@SP
A=M-1
D=M
A=A-1
D=D-M
@TRUE13.Math.multiply
D;JLT
(FALSE13.Math.multiply)
@SP
A=M-1
A=A-1
M=0
@END13.Math.multiply
0;JMP
(TRUE13.Math.multiply)
@SP
A=M-1
A=A-1
M=-1
(END13.Math.multiply)
@SP
M=M-1
//and
@SP
A=M-1
D=M
A=A-1
M=M&D
@SP
M=M-1
//push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M
@SEC_NEGATIVE15.Math.multiply
D;JLT
@SEC_POSITIVE15.Math.multiply
D;JGT
@BOTH_SAME15.Math.multiply
0;JMP
(SEC_NEGATIVE15.Math.multiply)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME15.Math.multiply
D;JLE
@DIFFERENT15.Math.multiply
D;JGT
(SEC_POSITIVE15.Math.multiply)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME15.Math.multiply
D;JGE
@DIFFERENT15.Math.multiply
D;JLT
(DIFFERENT15.Math.multiply)
@SP
A=M-1
D=M
@TRUE15.Math.multiply
D;JLT
@FALSE15.Math.multiply
0;JMP
(BOTH_SAME15.Math.multiply)
@SP
A=M-1
D=M
A=A-1
D=D-M
@TRUE15.Math.multiply
D;JLT
(FALSE15.Math.multiply)
@SP
A=M-1
A=A-1
M=0
@END15.Math.multiply
0;JMP
(TRUE15.Math.multiply)
@SP
A=M-1
A=A-1
M=-1
(END15.Math.multiply)
@SP
M=M-1
//push argument 1
@ARG
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M
@SEC_NEGATIVE16.Math.multiply
D;JLT
@SEC_POSITIVE16.Math.multiply
D;JGT
@BOTH_SAME16.Math.multiply
0;JMP
(SEC_NEGATIVE16.Math.multiply)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME16.Math.multiply
D;JLE
@DIFFERENT16.Math.multiply
D;JGT
(SEC_POSITIVE16.Math.multiply)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME16.Math.multiply
D;JGE
@DIFFERENT16.Math.multiply
D;JLT
(DIFFERENT16.Math.multiply)
@SP
A=M-1
D=M
@TRUE16.Math.multiply
D;JGT
@FALSE16.Math.multiply
0;JMP
(BOTH_SAME16.Math.multiply)
@SP
A=M-1
D=M
A=A-1
D=D-M
@TRUE16.Math.multiply
D;JGT
(FALSE16.Math.multiply)
@SP
A=M-1
A=A-1
M=0
@END16.Math.multiply
0;JMP
(TRUE16.Math.multiply)
@SP
A=M-1
A=A-1
M=-1
(END16.Math.multiply)
@SP
M=M-1
//and
@SP
A=M-1
D=M
A=A-1
M=M&D
@SP
M=M-1
//or
@SP
A=M-1
D=M
A=A-1
M=M|D
@SP
M=M-1
//pop local 4
@LCL
D=M
@4
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//writing call Math.abs
@Math.Math.multiply$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.Math.multiply$ret.3)
//pop argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push argument 1
@ARG
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//writing call Math.abs
@Math.Math.multiply$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.Math.multiply$ret.4)
//pop argument 1
@ARG
D=M
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@ARG
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M
@SEC_NEGATIVE19.Math.multiply
D;JLT
@SEC_POSITIVE19.Math.multiply
D;JGT
@BOTH_SAME19.Math.multiply
0;JMP
(SEC_NEGATIVE19.Math.multiply)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME19.Math.multiply
D;JLE
@DIFFERENT19.Math.multiply
D;JGT
(SEC_POSITIVE19.Math.multiply)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME19.Math.multiply
D;JGE
@DIFFERENT19.Math.multiply
D;JLT
(DIFFERENT19.Math.multiply)
@SP
A=M-1
D=M
@TRUE19.Math.multiply
D;JGT
@FALSE19.Math.multiply
0;JMP
(BOTH_SAME19.Math.multiply)
@SP
A=M-1
D=M
A=A-1
D=D-M
@TRUE19.Math.multiply
D;JGT
(FALSE19.Math.multiply)
@SP
A=M-1
A=A-1
M=0
@END19.Math.multiply
0;JMP
(TRUE19.Math.multiply)
@SP
A=M-1
A=A-1
M=-1
(END19.Math.multiply)
@SP
M=M-1
//write goto IF_TRUE0 if top of stack is not false
@SP
A=M-1
D=M
@SP
M=M-1
@Math.multiply$IF_TRUE0
D;JNE
//write goto IF_FALSE0
@Math.multiply$IF_FALSE0
0;JMP
//write label IF_TRUE0
(Math.multiply$IF_TRUE0)
//push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop local 1
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push argument 1
@ARG
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop argument 1
@ARG
D=M
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//write label IF_FALSE0
(Math.multiply$IF_FALSE0)
//write label WHILE_EXP0
(Math.multiply$WHILE_EXP0)
//push local 2
@LCL
D=M
@2
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@ARG
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M
@SEC_NEGATIVE20.Math.multiply
D;JLT
@SEC_POSITIVE20.Math.multiply
D;JGT
@BOTH_SAME20.Math.multiply
0;JMP
(SEC_NEGATIVE20.Math.multiply)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME20.Math.multiply
D;JLE
@DIFFERENT20.Math.multiply
D;JGT
(SEC_POSITIVE20.Math.multiply)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME20.Math.multiply
D;JGE
@DIFFERENT20.Math.multiply
D;JLT
(DIFFERENT20.Math.multiply)
@SP
A=M-1
D=M
@TRUE20.Math.multiply
D;JGT
@FALSE20.Math.multiply
0;JMP
(BOTH_SAME20.Math.multiply)
@SP
A=M-1
D=M
A=A-1
D=D-M
@TRUE20.Math.multiply
D;JGT
(FALSE20.Math.multiply)
@SP
A=M-1
A=A-1
M=0
@END20.Math.multiply
0;JMP
(TRUE20.Math.multiply)
@SP
A=M-1
A=A-1
M=-1
(END20.Math.multiply)
@SP
M=M-1
//not
@SP
A=M-1
M=!M
//write goto WHILE_END0 if top of stack is not false
@SP
A=M-1
D=M
@SP
M=M-1
@Math.multiply$WHILE_END0
D;JNE
//push local 3
@LCL
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@ARG
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//and
@SP
A=M-1
D=M
A=A-1
M=M&D
@SP
M=M-1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M
@SEC_NEGATIVE24.Math.multiply
D;JLT
@SEC_POSITIVE24.Math.multiply
D;JGT
@BOTH_SAME24.Math.multiply
0;JMP
(SEC_NEGATIVE24.Math.multiply)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME24.Math.multiply
D;JLE
@DIFFERENT24.Math.multiply
D;JGT
(SEC_POSITIVE24.Math.multiply)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME24.Math.multiply
D;JGE
@DIFFERENT24.Math.multiply
D;JLT
(DIFFERENT24.Math.multiply)
@SP
A=M-1
D=M
@TRUE24.Math.multiply
D;JLT
@FALSE24.Math.multiply
0;JMP
(BOTH_SAME24.Math.multiply)
@SP
A=M-1
D=M
A=A-1
D=D-M
@TRUE24.Math.multiply
D;JLT
(FALSE24.Math.multiply)
@SP
A=M-1
A=A-1
M=0
@END24.Math.multiply
0;JMP
(TRUE24.Math.multiply)
@SP
A=M-1
A=A-1
M=-1
(END24.Math.multiply)
@SP
M=M-1
//write goto IF_TRUE1 if top of stack is not false
@SP
A=M-1
D=M
@SP
M=M-1
@Math.multiply$IF_TRUE1
D;JNE
//write goto IF_FALSE1
@Math.multiply$IF_FALSE1
0;JMP
//write label IF_TRUE1
(Math.multiply$IF_TRUE1)
//push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push local 2
@LCL
D=M
@2
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 3
@LCL
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop local 2
@LCL
D=M
@2
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//write label IF_FALSE1
(Math.multiply$IF_FALSE1)
//push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push local 3
@LCL
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop local 3
@LCL
D=M
@3
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//write goto WHILE_EXP0
@Math.multiply$WHILE_EXP0
0;JMP
//write label WHILE_END0
(Math.multiply$WHILE_END0)
//push local 4
@LCL
D=M
@4
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//write goto IF_TRUE2 if top of stack is not false
@SP
A=M-1
D=M
@SP
M=M-1
@Math.multiply$IF_TRUE2
D;JNE
//write goto IF_FALSE2
@Math.multiply$IF_FALSE2
0;JMP
//write label IF_TRUE2
(Math.multiply$IF_TRUE2)
//push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//neg
@SP
A=M-1
M=-M
//pop local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//write label IF_FALSE2
(Math.multiply$IF_FALSE2)
//push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//writing return
@LCL
D=M
@frame
M=D
@5
D=A
@frame
D=M-D
A=D
D=M
@return_address
M=D
//pop argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M-1
A=D
D=M
@THAT
M=D
@2
D=A
@frame
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@frame
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@frame
D=M-D
A=D
D=M
@LCL
M=D
@return_address
A=M
0;JMP
//writing function Math.divide
(Math.divide)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@ARG
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//eq
@SP
A=M-1
D=M
@SEC_NEGATIVE31.Math.divide
D;JLT
@SEC_POSITIVE31.Math.divide
D;JGT
@BOTH_SAME31.Math.divide
0;JMP
(SEC_NEGATIVE31.Math.divide)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME31.Math.divide
D;JLE
@DIFFERENT31.Math.divide
D;JGT
(SEC_POSITIVE31.Math.divide)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME31.Math.divide
D;JGE
@DIFFERENT31.Math.divide
D;JLT
(DIFFERENT31.Math.divide)
@FALSE31.Math.divide
0;JMP
(BOTH_SAME31.Math.divide)
@SP
A=M-1
D=M
A=A-1
D=D-M
@TRUE31.Math.divide
D;JEQ
(FALSE31.Math.divide)
@SP
A=M-1
A=A-1
M=0
@END31.Math.divide
0;JMP
(TRUE31.Math.divide)
@SP
A=M-1
A=A-1
M=-1
(END31.Math.divide)
@SP
M=M-1
//write goto IF_TRUE0 if top of stack is not false
@SP
A=M-1
D=M
@SP
M=M-1
@Math.divide$IF_TRUE0
D;JNE
//write goto IF_FALSE0
@Math.divide$IF_FALSE0
0;JMP
//write label IF_TRUE0
(Math.divide$IF_TRUE0)
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//writing call Sys.error
@Math.Math.divide$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Math.Math.divide$ret.5)
//pop temp 0
@5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//write label IF_FALSE0
(Math.divide$IF_FALSE0)
//push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M
@SEC_NEGATIVE32.Math.divide
D;JLT
@SEC_POSITIVE32.Math.divide
D;JGT
@BOTH_SAME32.Math.divide
0;JMP
(SEC_NEGATIVE32.Math.divide)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME32.Math.divide
D;JLE
@DIFFERENT32.Math.divide
D;JGT
(SEC_POSITIVE32.Math.divide)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME32.Math.divide
D;JGE
@DIFFERENT32.Math.divide
D;JLT
(DIFFERENT32.Math.divide)
@SP
A=M-1
D=M
@TRUE32.Math.divide
D;JGT
@FALSE32.Math.divide
0;JMP
(BOTH_SAME32.Math.divide)
@SP
A=M-1
D=M
A=A-1
D=D-M
@TRUE32.Math.divide
D;JGT
(FALSE32.Math.divide)
@SP
A=M-1
A=A-1
M=0
@END32.Math.divide
0;JMP
(TRUE32.Math.divide)
@SP
A=M-1
A=A-1
M=-1
(END32.Math.divide)
@SP
M=M-1
//push argument 1
@ARG
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M
@SEC_NEGATIVE33.Math.divide
D;JLT
@SEC_POSITIVE33.Math.divide
D;JGT
@BOTH_SAME33.Math.divide
0;JMP
(SEC_NEGATIVE33.Math.divide)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME33.Math.divide
D;JLE
@DIFFERENT33.Math.divide
D;JGT
(SEC_POSITIVE33.Math.divide)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME33.Math.divide
D;JGE
@DIFFERENT33.Math.divide
D;JLT
(DIFFERENT33.Math.divide)
@SP
A=M-1
D=M
@TRUE33.Math.divide
D;JLT
@FALSE33.Math.divide
0;JMP
(BOTH_SAME33.Math.divide)
@SP
A=M-1
D=M
A=A-1
D=D-M
@TRUE33.Math.divide
D;JLT
(FALSE33.Math.divide)
@SP
A=M-1
A=A-1
M=0
@END33.Math.divide
0;JMP
(TRUE33.Math.divide)
@SP
A=M-1
A=A-1
M=-1
(END33.Math.divide)
@SP
M=M-1
//and
@SP
A=M-1
D=M
A=A-1
M=M&D
@SP
M=M-1
//push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M
@SEC_NEGATIVE35.Math.divide
D;JLT
@SEC_POSITIVE35.Math.divide
D;JGT
@BOTH_SAME35.Math.divide
0;JMP
(SEC_NEGATIVE35.Math.divide)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME35.Math.divide
D;JLE
@DIFFERENT35.Math.divide
D;JGT
(SEC_POSITIVE35.Math.divide)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME35.Math.divide
D;JGE
@DIFFERENT35.Math.divide
D;JLT
(DIFFERENT35.Math.divide)
@SP
A=M-1
D=M
@TRUE35.Math.divide
D;JLT
@FALSE35.Math.divide
0;JMP
(BOTH_SAME35.Math.divide)
@SP
A=M-1
D=M
A=A-1
D=D-M
@TRUE35.Math.divide
D;JLT
(FALSE35.Math.divide)
@SP
A=M-1
A=A-1
M=0
@END35.Math.divide
0;JMP
(TRUE35.Math.divide)
@SP
A=M-1
A=A-1
M=-1
(END35.Math.divide)
@SP
M=M-1
//push argument 1
@ARG
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M
@SEC_NEGATIVE36.Math.divide
D;JLT
@SEC_POSITIVE36.Math.divide
D;JGT
@BOTH_SAME36.Math.divide
0;JMP
(SEC_NEGATIVE36.Math.divide)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME36.Math.divide
D;JLE
@DIFFERENT36.Math.divide
D;JGT
(SEC_POSITIVE36.Math.divide)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME36.Math.divide
D;JGE
@DIFFERENT36.Math.divide
D;JLT
(DIFFERENT36.Math.divide)
@SP
A=M-1
D=M
@TRUE36.Math.divide
D;JGT
@FALSE36.Math.divide
0;JMP
(BOTH_SAME36.Math.divide)
@SP
A=M-1
D=M
A=A-1
D=D-M
@TRUE36.Math.divide
D;JGT
(FALSE36.Math.divide)
@SP
A=M-1
A=A-1
M=0
@END36.Math.divide
0;JMP
(TRUE36.Math.divide)
@SP
A=M-1
A=A-1
M=-1
(END36.Math.divide)
@SP
M=M-1
//and
@SP
A=M-1
D=M
A=A-1
M=M&D
@SP
M=M-1
//or
@SP
A=M-1
D=M
A=A-1
M=M|D
@SP
M=M-1
//pop local 2
@LCL
D=M
@2
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//push argument 1
@ARG
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//writing call Math.abs
@Math.Math.divide$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.Math.divide$ret.6)
//pop temp 0
@5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push temp 0
@5
D=A
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//writing call Math.abs
@Math.Math.divide$ret.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.Math.divide$ret.7)
//pop argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//write label WHILE_EXP0
(Math.divide$WHILE_EXP0)
//push local 3
@LCL
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
A=M-1
M=!M
//not
@SP
A=M-1
M=!M
//write goto WHILE_END0 if top of stack is not false
@SP
A=M-1
D=M
@SP
M=M-1
@Math.divide$WHILE_END0
D;JNE
//push constant 32767
@32767
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
A=M-1
D=M
A=A-1
M=M-D
@SP
M=M-1
//push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M
@SEC_NEGATIVE45.Math.divide
D;JLT
@SEC_POSITIVE45.Math.divide
D;JGT
@BOTH_SAME45.Math.divide
0;JMP
(SEC_NEGATIVE45.Math.divide)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME45.Math.divide
D;JLE
@DIFFERENT45.Math.divide
D;JGT
(SEC_POSITIVE45.Math.divide)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME45.Math.divide
D;JGE
@DIFFERENT45.Math.divide
D;JLT
(DIFFERENT45.Math.divide)
@SP
A=M-1
D=M
@TRUE45.Math.divide
D;JGT
@FALSE45.Math.divide
0;JMP
(BOTH_SAME45.Math.divide)
@SP
A=M-1
D=M
A=A-1
D=D-M
@TRUE45.Math.divide
D;JGT
(FALSE45.Math.divide)
@SP
A=M-1
A=A-1
M=0
@END45.Math.divide
0;JMP
(TRUE45.Math.divide)
@SP
A=M-1
A=A-1
M=-1
(END45.Math.divide)
@SP
M=M-1
//pop local 3
@LCL
D=M
@3
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push local 3
@LCL
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
A=M-1
M=!M
//write goto IF_TRUE1 if top of stack is not false
@SP
A=M-1
D=M
@SP
M=M-1
@Math.divide$IF_TRUE1
D;JNE
//write goto IF_FALSE1
@Math.divide$IF_FALSE1
0;JMP
//write label IF_TRUE1
(Math.divide$IF_TRUE1)
//push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop temp 0
@5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push temp 0
@5
D=A
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M
@SEC_NEGATIVE54.Math.divide
D;JLT
@SEC_POSITIVE54.Math.divide
D;JGT
@BOTH_SAME54.Math.divide
0;JMP
(SEC_NEGATIVE54.Math.divide)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME54.Math.divide
D;JLE
@DIFFERENT54.Math.divide
D;JGT
(SEC_POSITIVE54.Math.divide)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME54.Math.divide
D;JGE
@DIFFERENT54.Math.divide
D;JLT
(DIFFERENT54.Math.divide)
@SP
A=M-1
D=M
@TRUE54.Math.divide
D;JLT
@FALSE54.Math.divide
0;JMP
(BOTH_SAME54.Math.divide)
@SP
A=M-1
D=M
A=A-1
D=D-M
@TRUE54.Math.divide
D;JLT
(FALSE54.Math.divide)
@SP
A=M-1
A=A-1
M=0
@END54.Math.divide
0;JMP
(TRUE54.Math.divide)
@SP
A=M-1
A=A-1
M=-1
(END54.Math.divide)
@SP
M=M-1
//pop local 3
@LCL
D=M
@3
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push local 3
@LCL
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
A=M-1
M=!M
//write goto IF_TRUE2 if top of stack is not false
@SP
A=M-1
D=M
@SP
M=M-1
@Math.divide$IF_TRUE2
D;JNE
//write goto IF_FALSE2
@Math.divide$IF_FALSE2
0;JMP
//write label IF_TRUE2
(Math.divide$IF_TRUE2)
//push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//write label IF_FALSE2
(Math.divide$IF_FALSE2)
//write label IF_FALSE1
(Math.divide$IF_FALSE1)
//write goto WHILE_EXP0
@Math.divide$WHILE_EXP0
0;JMP
//write label WHILE_END0
(Math.divide$WHILE_END0)
//write label WHILE_EXP1
(Math.divide$WHILE_EXP1)
//push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//neg
@SP
A=M-1
M=-M
//gt
@SP
A=M-1
D=M
@SEC_NEGATIVE58.Math.divide
D;JLT
@SEC_POSITIVE58.Math.divide
D;JGT
@BOTH_SAME58.Math.divide
0;JMP
(SEC_NEGATIVE58.Math.divide)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME58.Math.divide
D;JLE
@DIFFERENT58.Math.divide
D;JGT
(SEC_POSITIVE58.Math.divide)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME58.Math.divide
D;JGE
@DIFFERENT58.Math.divide
D;JLT
(DIFFERENT58.Math.divide)
@SP
A=M-1
D=M
@TRUE58.Math.divide
D;JLT
@FALSE58.Math.divide
0;JMP
(BOTH_SAME58.Math.divide)
@SP
A=M-1
D=M
A=A-1
D=D-M
@TRUE58.Math.divide
D;JLT
(FALSE58.Math.divide)
@SP
A=M-1
A=A-1
M=0
@END58.Math.divide
0;JMP
(TRUE58.Math.divide)
@SP
A=M-1
A=A-1
M=-1
(END58.Math.divide)
@SP
M=M-1
//not
@SP
A=M-1
M=!M
//write goto WHILE_END1 if top of stack is not false
@SP
A=M-1
D=M
@SP
M=M-1
@Math.divide$WHILE_END1
D;JNE
//push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M
@SEC_NEGATIVE61.Math.divide
D;JLT
@SEC_POSITIVE61.Math.divide
D;JGT
@BOTH_SAME61.Math.divide
0;JMP
(SEC_NEGATIVE61.Math.divide)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME61.Math.divide
D;JLE
@DIFFERENT61.Math.divide
D;JGT
(SEC_POSITIVE61.Math.divide)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME61.Math.divide
D;JGE
@DIFFERENT61.Math.divide
D;JLT
(DIFFERENT61.Math.divide)
@SP
A=M-1
D=M
@TRUE61.Math.divide
D;JLT
@FALSE61.Math.divide
0;JMP
(BOTH_SAME61.Math.divide)
@SP
A=M-1
D=M
A=A-1
D=D-M
@TRUE61.Math.divide
D;JLT
(FALSE61.Math.divide)
@SP
A=M-1
A=A-1
M=0
@END61.Math.divide
0;JMP
(TRUE61.Math.divide)
@SP
A=M-1
A=A-1
M=-1
(END61.Math.divide)
@SP
M=M-1
//not
@SP
A=M-1
M=!M
//write goto IF_TRUE3 if top of stack is not false
@SP
A=M-1
D=M
@SP
M=M-1
@Math.divide$IF_TRUE3
D;JNE
//write goto IF_FALSE3
@Math.divide$IF_FALSE3
0;JMP
//write label IF_TRUE3
(Math.divide$IF_TRUE3)
//push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop local 1
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
A=M-1
D=M
A=A-1
M=M-D
@SP
M=M-1
//pop argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//write label IF_FALSE3
(Math.divide$IF_FALSE3)
//push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
A=M-1
D=M
A=A-1
M=M-D
@SP
M=M-1
//pop local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//write goto WHILE_EXP1
@Math.divide$WHILE_EXP1
0;JMP
//write label WHILE_END1
(Math.divide$WHILE_END1)
//push local 2
@LCL
D=M
@2
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//write goto IF_TRUE4 if top of stack is not false
@SP
A=M-1
D=M
@SP
M=M-1
@Math.divide$IF_TRUE4
D;JNE
//write goto IF_FALSE4
@Math.divide$IF_FALSE4
0;JMP
//write label IF_TRUE4
(Math.divide$IF_TRUE4)
//push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//neg
@SP
A=M-1
M=-M
//pop local 1
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//write label IF_FALSE4
(Math.divide$IF_FALSE4)
//push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//writing return
@LCL
D=M
@frame
M=D
@5
D=A
@frame
D=M-D
A=D
D=M
@return_address
M=D
//pop argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M-1
A=D
D=M
@THAT
M=D
@2
D=A
@frame
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@frame
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@frame
D=M-D
A=D
D=M
@LCL
M=D
@return_address
A=M
0;JMP
//writing function Math.sqrt
(Math.sqrt)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M
@SEC_NEGATIVE69.Math.sqrt
D;JLT
@SEC_POSITIVE69.Math.sqrt
D;JGT
@BOTH_SAME69.Math.sqrt
0;JMP
(SEC_NEGATIVE69.Math.sqrt)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME69.Math.sqrt
D;JLE
@DIFFERENT69.Math.sqrt
D;JGT
(SEC_POSITIVE69.Math.sqrt)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME69.Math.sqrt
D;JGE
@DIFFERENT69.Math.sqrt
D;JLT
(DIFFERENT69.Math.sqrt)
@SP
A=M-1
D=M
@TRUE69.Math.sqrt
D;JGT
@FALSE69.Math.sqrt
0;JMP
(BOTH_SAME69.Math.sqrt)
@SP
A=M-1
D=M
A=A-1
D=D-M
@TRUE69.Math.sqrt
D;JGT
(FALSE69.Math.sqrt)
@SP
A=M-1
A=A-1
M=0
@END69.Math.sqrt
0;JMP
(TRUE69.Math.sqrt)
@SP
A=M-1
A=A-1
M=-1
(END69.Math.sqrt)
@SP
M=M-1
//write goto IF_TRUE0 if top of stack is not false
@SP
A=M-1
D=M
@SP
M=M-1
@Math.sqrt$IF_TRUE0
D;JNE
//write goto IF_FALSE0
@Math.sqrt$IF_FALSE0
0;JMP
//write label IF_TRUE0
(Math.sqrt$IF_TRUE0)
//push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//writing call Sys.error
@Math.Math.sqrt$ret.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Math.Math.sqrt$ret.8)
//pop temp 0
@5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//write label IF_FALSE0
(Math.sqrt$IF_FALSE0)
//push constant 7
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//write label WHILE_EXP0
(Math.sqrt$WHILE_EXP0)
//push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//neg
@SP
A=M-1
M=-M
//gt
@SP
A=M-1
D=M
@SEC_NEGATIVE71.Math.sqrt
D;JLT
@SEC_POSITIVE71.Math.sqrt
D;JGT
@BOTH_SAME71.Math.sqrt
0;JMP
(SEC_NEGATIVE71.Math.sqrt)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME71.Math.sqrt
D;JLE
@DIFFERENT71.Math.sqrt
D;JGT
(SEC_POSITIVE71.Math.sqrt)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME71.Math.sqrt
D;JGE
@DIFFERENT71.Math.sqrt
D;JLT
(DIFFERENT71.Math.sqrt)
@SP
A=M-1
D=M
@TRUE71.Math.sqrt
D;JLT
@FALSE71.Math.sqrt
0;JMP
(BOTH_SAME71.Math.sqrt)
@SP
A=M-1
D=M
A=A-1
D=D-M
@TRUE71.Math.sqrt
D;JLT
(FALSE71.Math.sqrt)
@SP
A=M-1
A=A-1
M=0
@END71.Math.sqrt
0;JMP
(TRUE71.Math.sqrt)
@SP
A=M-1
A=A-1
M=-1
(END71.Math.sqrt)
@SP
M=M-1
//not
@SP
A=M-1
M=!M
//write goto WHILE_END0 if top of stack is not false
@SP
A=M-1
D=M
@SP
M=M-1
@Math.sqrt$WHILE_END0
D;JNE
//push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//writing call Math.multiply
@Math.Math.sqrt$ret.9
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.Math.sqrt$ret.9)
//push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M
@SEC_NEGATIVE77.Math.sqrt
D;JLT
@SEC_POSITIVE77.Math.sqrt
D;JGT
@BOTH_SAME77.Math.sqrt
0;JMP
(SEC_NEGATIVE77.Math.sqrt)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME77.Math.sqrt
D;JLE
@DIFFERENT77.Math.sqrt
D;JGT
(SEC_POSITIVE77.Math.sqrt)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME77.Math.sqrt
D;JGE
@DIFFERENT77.Math.sqrt
D;JLT
(DIFFERENT77.Math.sqrt)
@SP
A=M-1
D=M
@TRUE77.Math.sqrt
D;JLT
@FALSE77.Math.sqrt
0;JMP
(BOTH_SAME77.Math.sqrt)
@SP
A=M-1
D=M
A=A-1
D=D-M
@TRUE77.Math.sqrt
D;JLT
(FALSE77.Math.sqrt)
@SP
A=M-1
A=A-1
M=0
@END77.Math.sqrt
0;JMP
(TRUE77.Math.sqrt)
@SP
A=M-1
A=A-1
M=-1
(END77.Math.sqrt)
@SP
M=M-1
//not
@SP
A=M-1
M=!M
//write goto IF_TRUE1 if top of stack is not false
@SP
A=M-1
D=M
@SP
M=M-1
@Math.sqrt$IF_TRUE1
D;JNE
//write goto IF_FALSE1
@Math.sqrt$IF_FALSE1
0;JMP
//write label IF_TRUE1
(Math.sqrt$IF_TRUE1)
//push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop local 1
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//write label IF_FALSE1
(Math.sqrt$IF_FALSE1)
//push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
A=M-1
D=M
A=A-1
M=M-D
@SP
M=M-1
//pop local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//write goto WHILE_EXP0
@Math.sqrt$WHILE_EXP0
0;JMP
//write label WHILE_END0
(Math.sqrt$WHILE_END0)
//push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//writing return
@LCL
D=M
@frame
M=D
@5
D=A
@frame
D=M-D
A=D
D=M
@return_address
M=D
//pop argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M-1
A=D
D=M
@THAT
M=D
@2
D=A
@frame
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@frame
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@frame
D=M-D
A=D
D=M
@LCL
M=D
@return_address
A=M
0;JMP
//writing function Math.max
(Math.max)
//push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@ARG
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M
@SEC_NEGATIVE82.Math.max
D;JLT
@SEC_POSITIVE82.Math.max
D;JGT
@BOTH_SAME82.Math.max
0;JMP
(SEC_NEGATIVE82.Math.max)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME82.Math.max
D;JLE
@DIFFERENT82.Math.max
D;JGT
(SEC_POSITIVE82.Math.max)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME82.Math.max
D;JGE
@DIFFERENT82.Math.max
D;JLT
(DIFFERENT82.Math.max)
@SP
A=M-1
D=M
@TRUE82.Math.max
D;JLT
@FALSE82.Math.max
0;JMP
(BOTH_SAME82.Math.max)
@SP
A=M-1
D=M
A=A-1
D=D-M
@TRUE82.Math.max
D;JLT
(FALSE82.Math.max)
@SP
A=M-1
A=A-1
M=0
@END82.Math.max
0;JMP
(TRUE82.Math.max)
@SP
A=M-1
A=A-1
M=-1
(END82.Math.max)
@SP
M=M-1
//write goto IF_TRUE0 if top of stack is not false
@SP
A=M-1
D=M
@SP
M=M-1
@Math.max$IF_TRUE0
D;JNE
//write goto IF_FALSE0
@Math.max$IF_FALSE0
0;JMP
//write label IF_TRUE0
(Math.max$IF_TRUE0)
//push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop argument 1
@ARG
D=M
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//write label IF_FALSE0
(Math.max$IF_FALSE0)
//push argument 1
@ARG
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//writing return
@LCL
D=M
@frame
M=D
@5
D=A
@frame
D=M-D
A=D
D=M
@return_address
M=D
//pop argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M-1
A=D
D=M
@THAT
M=D
@2
D=A
@frame
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@frame
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@frame
D=M-D
A=D
D=M
@LCL
M=D
@return_address
A=M
0;JMP
//writing function Math.min
(Math.min)
//push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@ARG
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M
@SEC_NEGATIVE83.Math.min
D;JLT
@SEC_POSITIVE83.Math.min
D;JGT
@BOTH_SAME83.Math.min
0;JMP
(SEC_NEGATIVE83.Math.min)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME83.Math.min
D;JLE
@DIFFERENT83.Math.min
D;JGT
(SEC_POSITIVE83.Math.min)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME83.Math.min
D;JGE
@DIFFERENT83.Math.min
D;JLT
(DIFFERENT83.Math.min)
@SP
A=M-1
D=M
@TRUE83.Math.min
D;JGT
@FALSE83.Math.min
0;JMP
(BOTH_SAME83.Math.min)
@SP
A=M-1
D=M
A=A-1
D=D-M
@TRUE83.Math.min
D;JGT
(FALSE83.Math.min)
@SP
A=M-1
A=A-1
M=0
@END83.Math.min
0;JMP
(TRUE83.Math.min)
@SP
A=M-1
A=A-1
M=-1
(END83.Math.min)
@SP
M=M-1
//write goto IF_TRUE0 if top of stack is not false
@SP
A=M-1
D=M
@SP
M=M-1
@Math.min$IF_TRUE0
D;JNE
//write goto IF_FALSE0
@Math.min$IF_FALSE0
0;JMP
//write label IF_TRUE0
(Math.min$IF_TRUE0)
//push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop argument 1
@ARG
D=M
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//write label IF_FALSE0
(Math.min$IF_FALSE0)
//push argument 1
@ARG
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//writing return
@LCL
D=M
@frame
M=D
@5
D=A
@frame
D=M-D
A=D
D=M
@return_address
M=D
//pop argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M-1
A=D
D=M
@THAT
M=D
@2
D=A
@frame
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@frame
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@frame
D=M-D
A=D
D=M
@LCL
M=D
@return_address
A=M
0;JMP
//writing function Memory.init
(Memory.init)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop static 0
@SP
M=M-1
A=M
D=M
@Memory.0
M=D
//push constant 2048
@2048
D=A
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Memory.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//push constant 14334
@14334
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push temp 0
@5
D=A
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 2049
@2049
D=A
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Memory.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//push constant 2050
@2050
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push temp 0
@5
D=A
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//writing return
@LCL
D=M
@frame
M=D
@5
D=A
@frame
D=M-D
A=D
D=M
@return_address
M=D
//pop argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M-1
A=D
D=M
@THAT
M=D
@2
D=A
@frame
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@frame
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@frame
D=M-D
A=D
D=M
@LCL
M=D
@return_address
A=M
0;JMP
//writing function Memory.peek
(Memory.peek)
//push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Memory.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//writing return
@LCL
D=M
@frame
M=D
@5
D=A
@frame
D=M-D
A=D
D=M
@return_address
M=D
//pop argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M-1
A=D
D=M
@THAT
M=D
@2
D=A
@frame
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@frame
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@frame
D=M-D
A=D
D=M
@LCL
M=D
@return_address
A=M
0;JMP
//writing function Memory.poke
(Memory.poke)
//push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Memory.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//push argument 1
@ARG
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push temp 0
@5
D=A
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//writing return
@LCL
D=M
@frame
M=D
@5
D=A
@frame
D=M-D
A=D
D=M
@return_address
M=D
//pop argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M-1
A=D
D=M
@THAT
M=D
@2
D=A
@frame
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@frame
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@frame
D=M-D
A=D
D=M
@LCL
M=D
@return_address
A=M
0;JMP
//writing function Memory.alloc
(Memory.alloc)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M
@SEC_NEGATIVE4.Memory.alloc
D;JLT
@SEC_POSITIVE4.Memory.alloc
D;JGT
@BOTH_SAME4.Memory.alloc
0;JMP
(SEC_NEGATIVE4.Memory.alloc)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME4.Memory.alloc
D;JLE
@DIFFERENT4.Memory.alloc
D;JGT
(SEC_POSITIVE4.Memory.alloc)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME4.Memory.alloc
D;JGE
@DIFFERENT4.Memory.alloc
D;JLT
(DIFFERENT4.Memory.alloc)
@SP
A=M-1
D=M
@TRUE4.Memory.alloc
D;JGT
@FALSE4.Memory.alloc
0;JMP
(BOTH_SAME4.Memory.alloc)
@SP
A=M-1
D=M
A=A-1
D=D-M
@TRUE4.Memory.alloc
D;JGT
(FALSE4.Memory.alloc)
@SP
A=M-1
A=A-1
M=0
@END4.Memory.alloc
0;JMP
(TRUE4.Memory.alloc)
@SP
A=M-1
A=A-1
M=-1
(END4.Memory.alloc)
@SP
M=M-1
//write goto IF_TRUE0 if top of stack is not false
@SP
A=M-1
D=M
@SP
M=M-1
@Memory.alloc$IF_TRUE0
D;JNE
//write goto IF_FALSE0
@Memory.alloc$IF_FALSE0
0;JMP
//write label IF_TRUE0
(Memory.alloc$IF_TRUE0)
//push constant 5
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
//writing call Sys.error
@Memory.Memory.alloc$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Memory.Memory.alloc$ret.1)
//pop temp 0
@5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//write label IF_FALSE0
(Memory.alloc$IF_FALSE0)
//push constant 2048
@2048
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 1
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//write label WHILE_EXP0
(Memory.alloc$WHILE_EXP0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M
@SEC_NEGATIVE6.Memory.alloc
D;JLT
@SEC_POSITIVE6.Memory.alloc
D;JGT
@BOTH_SAME6.Memory.alloc
0;JMP
(SEC_NEGATIVE6.Memory.alloc)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME6.Memory.alloc
D;JLE
@DIFFERENT6.Memory.alloc
D;JGT
(SEC_POSITIVE6.Memory.alloc)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME6.Memory.alloc
D;JGE
@DIFFERENT6.Memory.alloc
D;JLT
(DIFFERENT6.Memory.alloc)
@SP
A=M-1
D=M
@TRUE6.Memory.alloc
D;JGT
@FALSE6.Memory.alloc
0;JMP
(BOTH_SAME6.Memory.alloc)
@SP
A=M-1
D=M
A=A-1
D=D-M
@TRUE6.Memory.alloc
D;JGT
(FALSE6.Memory.alloc)
@SP
A=M-1
A=A-1
M=0
@END6.Memory.alloc
0;JMP
(TRUE6.Memory.alloc)
@SP
A=M-1
A=A-1
M=-1
(END6.Memory.alloc)
@SP
M=M-1
//not
@SP
A=M-1
M=!M
//write goto WHILE_END0 if top of stack is not false
@SP
A=M-1
D=M
@SP
M=M-1
@Memory.alloc$WHILE_END0
D;JNE
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop local 1
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//write goto WHILE_EXP0
@Memory.alloc$WHILE_EXP0
0;JMP
//write label WHILE_END0
(Memory.alloc$WHILE_END0)
//push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//push constant 16379
@16379
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M
@SEC_NEGATIVE10.Memory.alloc
D;JLT
@SEC_POSITIVE10.Memory.alloc
D;JGT
@BOTH_SAME10.Memory.alloc
0;JMP
(SEC_NEGATIVE10.Memory.alloc)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME10.Memory.alloc
D;JLE
@DIFFERENT10.Memory.alloc
D;JGT
(SEC_POSITIVE10.Memory.alloc)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME10.Memory.alloc
D;JGE
@DIFFERENT10.Memory.alloc
D;JLT
(DIFFERENT10.Memory.alloc)
@SP
A=M-1
D=M
@TRUE10.Memory.alloc
D;JLT
@FALSE10.Memory.alloc
0;JMP
(BOTH_SAME10.Memory.alloc)
@SP
A=M-1
D=M
A=A-1
D=D-M
@TRUE10.Memory.alloc
D;JLT
(FALSE10.Memory.alloc)
@SP
A=M-1
A=A-1
M=0
@END10.Memory.alloc
0;JMP
(TRUE10.Memory.alloc)
@SP
A=M-1
A=A-1
M=-1
(END10.Memory.alloc)
@SP
M=M-1
//write goto IF_TRUE1 if top of stack is not false
@SP
A=M-1
D=M
@SP
M=M-1
@Memory.alloc$IF_TRUE1
D;JNE
//write goto IF_FALSE1
@Memory.alloc$IF_FALSE1
0;JMP
//write label IF_TRUE1
(Memory.alloc$IF_TRUE1)
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//writing call Sys.error
@Memory.Memory.alloc$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Memory.Memory.alloc$ret.2)
//pop temp 0
@5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//write label IF_FALSE1
(Memory.alloc$IF_FALSE1)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//gt
@SP
A=M-1
D=M
@SEC_NEGATIVE13.Memory.alloc
D;JLT
@SEC_POSITIVE13.Memory.alloc
D;JGT
@BOTH_SAME13.Memory.alloc
0;JMP
(SEC_NEGATIVE13.Memory.alloc)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME13.Memory.alloc
D;JLE
@DIFFERENT13.Memory.alloc
D;JGT
(SEC_POSITIVE13.Memory.alloc)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME13.Memory.alloc
D;JGE
@DIFFERENT13.Memory.alloc
D;JLT
(DIFFERENT13.Memory.alloc)
@SP
A=M-1
D=M
@TRUE13.Memory.alloc
D;JLT
@FALSE13.Memory.alloc
0;JMP
(BOTH_SAME13.Memory.alloc)
@SP
A=M-1
D=M
A=A-1
D=D-M
@TRUE13.Memory.alloc
D;JLT
(FALSE13.Memory.alloc)
@SP
A=M-1
A=A-1
M=0
@END13.Memory.alloc
0;JMP
(TRUE13.Memory.alloc)
@SP
A=M-1
A=A-1
M=-1
(END13.Memory.alloc)
@SP
M=M-1
//write goto IF_TRUE2 if top of stack is not false
@SP
A=M-1
D=M
@SP
M=M-1
@Memory.alloc$IF_TRUE2
D;JNE
//write goto IF_FALSE2
@Memory.alloc$IF_FALSE2
0;JMP
//write label IF_TRUE2
(Memory.alloc$IF_TRUE2)
//push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
A=M-1
D=M
A=A-1
M=M-D
@SP
M=M-1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
A=M-1
D=M
A=A-1
M=M-D
@SP
M=M-1
//pop temp 0
@5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push temp 0
@5
D=A
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//eq
@SP
A=M-1
D=M
@SEC_NEGATIVE21.Memory.alloc
D;JLT
@SEC_POSITIVE21.Memory.alloc
D;JGT
@BOTH_SAME21.Memory.alloc
0;JMP
(SEC_NEGATIVE21.Memory.alloc)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME21.Memory.alloc
D;JLE
@DIFFERENT21.Memory.alloc
D;JGT
(SEC_POSITIVE21.Memory.alloc)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME21.Memory.alloc
D;JGE
@DIFFERENT21.Memory.alloc
D;JLT
(DIFFERENT21.Memory.alloc)
@FALSE21.Memory.alloc
0;JMP
(BOTH_SAME21.Memory.alloc)
@SP
A=M-1
D=M
A=A-1
D=D-M
@TRUE21.Memory.alloc
D;JEQ
(FALSE21.Memory.alloc)
@SP
A=M-1
A=A-1
M=0
@END21.Memory.alloc
0;JMP
(TRUE21.Memory.alloc)
@SP
A=M-1
A=A-1
M=-1
(END21.Memory.alloc)
@SP
M=M-1
//write goto IF_TRUE3 if top of stack is not false
@SP
A=M-1
D=M
@SP
M=M-1
@Memory.alloc$IF_TRUE3
D;JNE
//write goto IF_FALSE3
@Memory.alloc$IF_FALSE3
0;JMP
//write label IF_TRUE3
(Memory.alloc$IF_TRUE3)
//push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop temp 0
@5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push temp 0
@5
D=A
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//write goto IF_END3
@Memory.alloc$IF_END3
0;JMP
//write label IF_FALSE3
(Memory.alloc$IF_FALSE3)
//push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push temp 0
@5
D=A
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//write label IF_END3
(Memory.alloc$IF_END3)
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop temp 0
@5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push temp 0
@5
D=A
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//write label IF_FALSE2
(Memory.alloc$IF_FALSE2)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push temp 0
@5
D=A
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//writing return
@LCL
D=M
@frame
M=D
@5
D=A
@frame
D=M-D
A=D
D=M
@return_address
M=D
//pop argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M-1
A=D
D=M
@THAT
M=D
@2
D=A
@frame
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@frame
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@frame
D=M-D
A=D
D=M
@LCL
M=D
@return_address
A=M
0;JMP
//writing function Memory.deAlloc
(Memory.deAlloc)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
A=M-1
D=M
A=A-1
M=M-D
@SP
M=M-1
//pop local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop local 1
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//eq
@SP
A=M-1
D=M
@SEC_NEGATIVE37.Memory.deAlloc
D;JLT
@SEC_POSITIVE37.Memory.deAlloc
D;JGT
@BOTH_SAME37.Memory.deAlloc
0;JMP
(SEC_NEGATIVE37.Memory.deAlloc)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME37.Memory.deAlloc
D;JLE
@DIFFERENT37.Memory.deAlloc
D;JGT
(SEC_POSITIVE37.Memory.deAlloc)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME37.Memory.deAlloc
D;JGE
@DIFFERENT37.Memory.deAlloc
D;JLT
(DIFFERENT37.Memory.deAlloc)
@FALSE37.Memory.deAlloc
0;JMP
(BOTH_SAME37.Memory.deAlloc)
@SP
A=M-1
D=M
A=A-1
D=D-M
@TRUE37.Memory.deAlloc
D;JEQ
(FALSE37.Memory.deAlloc)
@SP
A=M-1
A=A-1
M=0
@END37.Memory.deAlloc
0;JMP
(TRUE37.Memory.deAlloc)
@SP
A=M-1
A=A-1
M=-1
(END37.Memory.deAlloc)
@SP
M=M-1
//write goto IF_TRUE0 if top of stack is not false
@SP
A=M-1
D=M
@SP
M=M-1
@Memory.deAlloc$IF_TRUE0
D;JNE
//write goto IF_FALSE0
@Memory.deAlloc$IF_FALSE0
0;JMP
//write label IF_TRUE0
(Memory.deAlloc$IF_TRUE0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
A=M-1
D=M
A=A-1
M=M-D
@SP
M=M-1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
A=M-1
D=M
A=A-1
M=M-D
@SP
M=M-1
//pop temp 0
@5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push temp 0
@5
D=A
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//write goto IF_END0
@Memory.deAlloc$IF_END0
0;JMP
//write label IF_FALSE0
(Memory.deAlloc$IF_FALSE0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
A=M-1
D=M
A=A-1
M=M-D
@SP
M=M-1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop temp 0
@5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push temp 0
@5
D=A
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//eq
@SP
A=M-1
D=M
@SEC_NEGATIVE49.Memory.deAlloc
D;JLT
@SEC_POSITIVE49.Memory.deAlloc
D;JGT
@BOTH_SAME49.Memory.deAlloc
0;JMP
(SEC_NEGATIVE49.Memory.deAlloc)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME49.Memory.deAlloc
D;JLE
@DIFFERENT49.Memory.deAlloc
D;JGT
(SEC_POSITIVE49.Memory.deAlloc)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME49.Memory.deAlloc
D;JGE
@DIFFERENT49.Memory.deAlloc
D;JLT
(DIFFERENT49.Memory.deAlloc)
@FALSE49.Memory.deAlloc
0;JMP
(BOTH_SAME49.Memory.deAlloc)
@SP
A=M-1
D=M
A=A-1
D=D-M
@TRUE49.Memory.deAlloc
D;JEQ
(FALSE49.Memory.deAlloc)
@SP
A=M-1
A=A-1
M=0
@END49.Memory.deAlloc
0;JMP
(TRUE49.Memory.deAlloc)
@SP
A=M-1
A=A-1
M=-1
(END49.Memory.deAlloc)
@SP
M=M-1
//write goto IF_TRUE1 if top of stack is not false
@SP
A=M-1
D=M
@SP
M=M-1
@Memory.deAlloc$IF_TRUE1
D;JNE
//write goto IF_FALSE1
@Memory.deAlloc$IF_FALSE1
0;JMP
//write label IF_TRUE1
(Memory.deAlloc$IF_TRUE1)
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop temp 0
@5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push temp 0
@5
D=A
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//write goto IF_END1
@Memory.deAlloc$IF_END1
0;JMP
//write label IF_FALSE1
(Memory.deAlloc$IF_FALSE1)
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//pop pointer 1
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//push temp 0
@5
D=A
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//write label IF_END1
(Memory.deAlloc$IF_END1)
//write label IF_END0
(Memory.deAlloc$IF_END0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//writing return
@LCL
D=M
@frame
M=D
@5
D=A
@frame
D=M-D
A=D
D=M
@return_address
M=D
//pop argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M-1
A=D
D=M
@THAT
M=D
@2
D=A
@frame
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@frame
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@frame
D=M-D
A=D
D=M
@LCL
M=D
@return_address
A=M
0;JMP
//writing function Sys.init
(Sys.init)
//writing call Memory.init
@Sys.Sys.init$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.init
0;JMP
(Sys.Sys.init$ret.1)
//pop temp 0
@5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//writing call Math.init
@Sys.Sys.init$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.init
0;JMP
(Sys.Sys.init$ret.2)
//pop temp 0
@5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//pop temp 0
@5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//pop temp 0
@5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//pop temp 0
@5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//pop temp 0
@5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//pop temp 0
@5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//pop temp 0
@5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//writing call Main.main
@Sys.Sys.init$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.main
0;JMP
(Sys.Sys.init$ret.3)
//pop temp 0
@5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//write label WHILE_EXP0
(Sys.init$WHILE_EXP0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
A=M-1
M=!M
//not
@SP
A=M-1
M=!M
//write goto WHILE_END0 if top of stack is not false
@SP
A=M-1
D=M
@SP
M=M-1
@Sys.init$WHILE_END0
D;JNE
//write goto WHILE_EXP0
@Sys.init$WHILE_EXP0
0;JMP
//write label WHILE_END0
(Sys.init$WHILE_END0)
//writing function Sys.halt
(Sys.halt)
//write label WHILE_EXP0
(Sys.halt$WHILE_EXP0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
A=M-1
M=!M
//not
@SP
A=M-1
M=!M
//write goto WHILE_END0 if top of stack is not false
@SP
A=M-1
D=M
@SP
M=M-1
@Sys.halt$WHILE_END0
D;JNE
//write goto WHILE_EXP0
@Sys.halt$WHILE_EXP0
0;JMP
//write label WHILE_END0
(Sys.halt$WHILE_END0)
//writing function Sys.wait
(Sys.wait)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M
@SEC_NEGATIVE4.Sys.wait
D;JLT
@SEC_POSITIVE4.Sys.wait
D;JGT
@BOTH_SAME4.Sys.wait
0;JMP
(SEC_NEGATIVE4.Sys.wait)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME4.Sys.wait
D;JLE
@DIFFERENT4.Sys.wait
D;JGT
(SEC_POSITIVE4.Sys.wait)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME4.Sys.wait
D;JGE
@DIFFERENT4.Sys.wait
D;JLT
(DIFFERENT4.Sys.wait)
@SP
A=M-1
D=M
@TRUE4.Sys.wait
D;JGT
@FALSE4.Sys.wait
0;JMP
(BOTH_SAME4.Sys.wait)
@SP
A=M-1
D=M
A=A-1
D=D-M
@TRUE4.Sys.wait
D;JGT
(FALSE4.Sys.wait)
@SP
A=M-1
A=A-1
M=0
@END4.Sys.wait
0;JMP
(TRUE4.Sys.wait)
@SP
A=M-1
A=A-1
M=-1
(END4.Sys.wait)
@SP
M=M-1
//write goto IF_TRUE0 if top of stack is not false
@SP
A=M-1
D=M
@SP
M=M-1
@Sys.wait$IF_TRUE0
D;JNE
//write goto IF_FALSE0
@Sys.wait$IF_FALSE0
0;JMP
//write label IF_TRUE0
(Sys.wait$IF_TRUE0)
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//writing call Sys.error
@Sys.Sys.wait$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.Sys.wait$ret.4)
//pop temp 0
@5
D=A
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//write label IF_FALSE0
(Sys.wait$IF_FALSE0)
//write label WHILE_EXP0
(Sys.wait$WHILE_EXP0)
//push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M
@SEC_NEGATIVE5.Sys.wait
D;JLT
@SEC_POSITIVE5.Sys.wait
D;JGT
@BOTH_SAME5.Sys.wait
0;JMP
(SEC_NEGATIVE5.Sys.wait)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME5.Sys.wait
D;JLE
@DIFFERENT5.Sys.wait
D;JGT
(SEC_POSITIVE5.Sys.wait)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME5.Sys.wait
D;JGE
@DIFFERENT5.Sys.wait
D;JLT
(DIFFERENT5.Sys.wait)
@SP
A=M-1
D=M
@TRUE5.Sys.wait
D;JLT
@FALSE5.Sys.wait
0;JMP
(BOTH_SAME5.Sys.wait)
@SP
A=M-1
D=M
A=A-1
D=D-M
@TRUE5.Sys.wait
D;JLT
(FALSE5.Sys.wait)
@SP
A=M-1
A=A-1
M=0
@END5.Sys.wait
0;JMP
(TRUE5.Sys.wait)
@SP
A=M-1
A=A-1
M=-1
(END5.Sys.wait)
@SP
M=M-1
//not
@SP
A=M-1
M=!M
//write goto WHILE_END0 if top of stack is not false
@SP
A=M-1
D=M
@SP
M=M-1
@Sys.wait$WHILE_END0
D;JNE
//push constant 50
@50
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//write label WHILE_EXP1
(Sys.wait$WHILE_EXP1)
//push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M
@SEC_NEGATIVE7.Sys.wait
D;JLT
@SEC_POSITIVE7.Sys.wait
D;JGT
@BOTH_SAME7.Sys.wait
0;JMP
(SEC_NEGATIVE7.Sys.wait)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME7.Sys.wait
D;JLE
@DIFFERENT7.Sys.wait
D;JGT
(SEC_POSITIVE7.Sys.wait)
@SP
A=M-1
A=A-1
D=M
@BOTH_SAME7.Sys.wait
D;JGE
@DIFFERENT7.Sys.wait
D;JLT
(DIFFERENT7.Sys.wait)
@SP
A=M-1
D=M
@TRUE7.Sys.wait
D;JLT
@FALSE7.Sys.wait
0;JMP
(BOTH_SAME7.Sys.wait)
@SP
A=M-1
D=M
A=A-1
D=D-M
@TRUE7.Sys.wait
D;JLT
(FALSE7.Sys.wait)
@SP
A=M-1
A=A-1
M=0
@END7.Sys.wait
0;JMP
(TRUE7.Sys.wait)
@SP
A=M-1
A=A-1
M=-1
(END7.Sys.wait)
@SP
M=M-1
//not
@SP
A=M-1
M=!M
//write goto WHILE_END1 if top of stack is not false
@SP
A=M-1
D=M
@SP
M=M-1
@Sys.wait$WHILE_END1
D;JNE
//push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
A=M-1
D=M
A=A-1
M=M-D
@SP
M=M-1
//pop local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//write goto WHILE_EXP1
@Sys.wait$WHILE_EXP1
0;JMP
//write label WHILE_END1
(Sys.wait$WHILE_END1)
//push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
A=M-1
D=M
A=A-1
M=M-D
@SP
M=M-1
//pop argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//write goto WHILE_EXP0
@Sys.wait$WHILE_EXP0
0;JMP
//write label WHILE_END0
(Sys.wait$WHILE_END0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//writing return
@LCL
D=M
@frame
M=D
@5
D=A
@frame
D=M-D
A=D
D=M
@return_address
M=D
//pop argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M-1
A=D
D=M
@THAT
M=D
@2
D=A
@frame
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@frame
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@frame
D=M-D
A=D
D=M
@LCL
M=D
@return_address
A=M
0;JMP
//writing function Sys.error
(Sys.error)
//write label WHILE_EXP0
(Sys.error$WHILE_EXP0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
A=M-1
M=!M
//not
@SP
A=M-1
M=!M
//write goto WHILE_END0 if top of stack is not false
@SP
A=M-1
D=M
@SP
M=M-1
@Sys.error$WHILE_END0
D;JNE
//write goto WHILE_EXP0
@Sys.error$WHILE_EXP0
0;JMP
//write label WHILE_END0
(Sys.error$WHILE_END0)
